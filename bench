#!/bin/sh
set -e

tests=$(ls -d */ | grep -v 'http/')
languages=""
skip=""
cpu_cycles=false
timeout_duration="300"
while getopts cl:s:t:T: name
do
    case $name in
    c)    cpu_cycles=true;;
    l)    languages="$OPTARG";;
    s)    skip="$OPTARG";;
    t)    tests="$OPTARG";;
    T)    timeout_duration="$OPTARG";;
    ?)    printf "usage: %s: [-c] [-l languages...] [-s languages...] [-t tests...] [-T timeout]\n" "$0"
          printf "  -c: show CPU cycles elapsed instead of time (macOS only)\n"
          printf "  -l: run specific languages (e.g., 'c go rust')\n"
          printf "  -s: skip specific languages (e.g., 'lua python3')\n"
          printf "  -t: run specific tests (e.g., 'minimal/ record/')\n"
          printf "  -T: timeout for each test in seconds (e.g., '30')\n"
          exit 2;;
    esac
done
shift $(($OPTIND - 1))
unset name

command=/usr/bin/time
if [ "$cpu_cycles" = true ]; then
    options="-l"
else
    options="-p"
fi

clean() {
    # C/C++
    if [ -f makefile ]
    then
      make -s clean
    else
      rm -f a.out
    fi

    # Go
    rm -f $1

    # C#
    rm -f *.dll $1.csproj
    rm -rf bin obj

    # Java
    rm -f "$(classname $1)".class

    # Rust
    rm -f ${1}
    if [ -f Cargo.toml ]; then
        rm -rf target
    fi

    # Zig
    rm -f ${1}
    rm -f ${1}.o
}

# backup - backup files as *.orig
# usage: backup source_file...
backup() {
    for source_file in "$@"
    do
        target_file=${source_file}.orig
        if [ -f "$source_file" ]
        then
            mv -f "$source_file" "$target_file"
        fi
        unset target_file
    done
    unset source_file
}

# restore - restore files from *.orig and ~
# usage: restore source_file...
restore() {
    for source_file in "$@"
    do
        if [ -f "$source_file" ]
        then
            target_file=${source_file%.orig}
            if [ "$source_file" != "$target_file" ]
            then
                mv -f "$source_file" "$target_file"
            fi
        fi

        if [ -f "$source_file" ]
        then
            target_file=${source_file%~}
            if [ "$source_file" != "$target_file" ]
            then
                mv -f "$source_file" "$target_file"
            fi
        fi

        unset target_file
    done
    unset source_file
}

capitalize() {
    read input
    printf "%s" "$input" | awk '{ print toupper(substr($0, 1, 1)) substr($0, 2) }'
    unset input
}

classname() {
    echo ${1}App | capitalize
}

should_run_language() {
    lang="$1"

    if [ -n "$languages" ]; then
        case " $languages " in
            *" $lang "*) return 0 ;;
            *) return 1 ;;
        esac
    fi

    if [ -n "$skip" ]; then
        case " $skip " in
            *" $lang "*) return 1 ;;
            *) return 0 ;;
        esac
    fi

    return 0
}

run_with_timeout() {
    if [ -n "$timeout_duration" ] && command -v timeout >/dev/null 2>&1; then
        timeout "$timeout_duration" "$@"  || echo "failed to complete within $timeout_duration seconds"
    elif [ -n "$timeout_duration" ] && command -v gtimeout >/dev/null 2>&1; then
        gtimeout "$timeout_duration" "$@" || echo "failed to complete within $timeout_duration seconds"
    else
        "$@"
    fi
}

format() {
    if [ "$cpu_cycles" = true ]; then
        grep "cycles elapsed" | awk '{printf "cycles elapsed %s", $1}'
    else
        cat
    fi
}

for d in $tests
do
    file=$(basename "$d")
    cd "$file"
    echo "$file"
    clean "$file"

    # C
    if [ -f ${file}.c ] && should_run_language "c"
    then
        restore *.c* *.cpp*
        if [ -f makefile ]
        then
            make -s
        else
            # ISO POSIX-2:1993
            c89 ${file}.c
        fi
        printf " %s\t" c
        run_with_timeout $command $options ./a.out 2>&1 \
        | format | tr -s '\n' '\t'
        printf '\n'
    fi

    # C++
    if [ -f ${file}.cpp ] && should_run_language "cpp"
    then
        if [ -f makefile ]
        then
            make -s c++
        else
            # CXX
            g++ ${file}.cpp
        fi
        printf " %s\t" cpp
        run_with_timeout $command $options ./a.out 2>&1 \
        | format | tr -s '\n' '\t'
        printf '\n'
    fi

    # Go
    # C/C++ source files not allowed when not using cgo or SWIG
    # Avoid setting CGO_ENABLED=0, backup and restore instead
    if [ -f ${file}.go ] \
    && command -v go > /dev/null \
    && should_run_language "go"
    then
        backup *.c *.cpp
        go build ./...
        restore *.c* *.cpp*
        printf " %s\t" go
        run_with_timeout $command $options ./${file} 2>&1 \
        | format | tr -s '\n' '\t'
        printf '\n'
    fi

    # C#
    if [ -f ${file}.cs ] \
    && command -v dotnet > /dev/null \
    && should_run_language "cs"
    then
        dotnet new console > /dev/null 2>&1
        mv -f ${file}.cs Program.cs
        dotnet build > /dev/null 2>&1
        mv -f Program.cs ${file}.cs
        printf " %s\t" cs
        run_with_timeout $command $options dotnet run 2>&1 \
        | format | tr -s '\n' '\t'
        printf '\n'
    fi

    # Java
    if [ -f ${file}.java ] \
    && command -v javac > /dev/null \
    && command -v java  > /dev/null \
    && should_run_language "java"
    then
        javac -cp '.:*' ${file}.java
        printf " %s\t" java
        class=$(classname $file)
        run_with_timeout $command $options java -cp '.:*' $class 2>&1 \
        | format | tr -s '\n' '\t'
        printf '\n'
        unset class
    fi

    # Node
    if [ -f ${file}.js ] \
    && command -v node > /dev/null \
    && should_run_language "js"
    then
        printf " %s\t" js
        # nvm
        # sudo ln -s $(which node) /usr/local/bin/node
        run_with_timeout $command $options node --max-old-space-size=8192 ${file}.js 2>&1 \
        | format | tr -s '\n' '\t'
        printf '\n'
    fi

    # Lua/LuaJIT
    if [ -f ${file}.lua ]
    then
        if command -v lua > /dev/null \
        && should_run_language "lua"
        then
            if [ -f makefile ]
            then
                make -s lua
            fi

            printf " %s\t" lua
            # macOS
            # cd /opt/homebrew/bin/
            # ln -s ../Cellar/lua@5.1/5.1.5_8/bin/lua-5.1 lua
            run_with_timeout $command $options lua ${file}.lua 2>&1 \
            | format | tr -s '\n' '\t'
            printf '\n'
        fi

        if command -v luajit > /dev/null \
        && should_run_language "luajit"
        then
            if [ -f makefile ]
            then
                make -s clean luajit
            fi

            printf " %s\t" luajit
            run_with_timeout $command $options luajit ${file}.lua 2>&1 \
            | format | tr -s '\n' '\t'
            printf '\n'
        fi
    fi

    # PHP
    if [ -f ${file}.php ] \
    && command -v php > /dev/null \
    && should_run_language "php"
    then
        printf " %s\t" php
        run_with_timeout $command $options php -d memory_limit=8G ${file}.php 2>&1 \
        | format | tr -s '\n' '\t'
        printf '\n'
    fi

    # Python
    if [ -f ${file}.py ] \
    && command -v python3 > /dev/null \
    && should_run_language "python3"
    then
        printf " %s\t" python3
        run_with_timeout $command $options python3 ${file}.py 2>&1 \
        | format | tr -s '\n' '\t'
        printf '\n'
    fi

    # Ruby
    if [ -f ${file}.rb ] \
    && command -v ruby > /dev/null \
    && should_run_language "ruby"
    then
        printf " %s\t" ruby
        run_with_timeout $command $options ruby ${file}.rb 2>&1 \
        | format | tr -s '\n' '\t'
        printf '\n'
    fi

    # Rust
    if [ -f ${file}.rs ] \
    && command -v rustc > /dev/null \
    && should_run_language "rust"
    then
        if [ -f Cargo.toml ]; then
            if command -v cargo > /dev/null; then
                cargo build --release > /dev/null 2>&1
                printf " %s\t" rust
                run_with_timeout $command $options ./target/release/${file} 2>&1 \
                | format | tr -s '\n' '\t'
                printf '\n'
            fi
        else
            rustc -O ${file}.rs -o ${file}
            printf " %s\t" rust
            run_with_timeout $command $options ./${file} 2>&1 \
            | format | tr -s '\n' '\t'
            printf '\n'
        fi
    fi

    # Zig
    if [ -f ${file}.zig ] \
    && command -v zig > /dev/null \
    && should_run_language "zig"
    then
        zig build-exe -O ReleaseFast ${file}.zig > /dev/null 2>&1
        printf " %s\t" zig
        run_with_timeout $command $options ./${file} 2>&1 \
        | format | tr -s '\n' '\t'
        printf '\n'
    fi

    cd ..
    unset file
done
unset d
