#!/bin/sh
set -e


command=/usr/bin/time
options=

clean() {
    # C/C++
    rm -f a.out

    # Go
    rm -f $1

    # Java
    rm -f $(classname $1).class
}

prebuild() {
    if [ -f prebuild ]; then
        ./prebuild
    fi
}

backup() {
    if [ -f $1 ]; then
        mv -f $1 $1~
    fi
}

restore() {
    if [ -f $1~ ]; then
        mv -f $1~ $1
    fi
}

capitalize() {
    local input
    read input
    printf $input | awk '{ print toupper(substr($0, 1, 1)) substr($0, 2) }'
}

classname() {
    echo ${1}App | capitalize
}

for d in */
do
    file=$(basename $d)
    cd $d
    echo $file

    clean $file
    prebuild

    # C
    if [ -f ${file}.c ]; then
        cc ${file}.c
        printf " %s\t" c
        $command $options ./a.out
    fi

    # C++
    if [ -f ${file}.cpp ]; then
        cc ${file}.cpp
        printf " %s\t" cpp
        $command $options ./a.out
    fi

    # Go
    # C/C++ source files not allowed when not using cgo or SWIG
    # Avoid setting CGO_ENABLED=0, backup and restore instead
    if [ -f ${file}.go ]; then
        backup ${file}.c
        backup ${file}.cpp
        go build ./...
        restore ${file}.c
        restore ${file}.cpp
        printf " %s\t" go
        $command $options ./${file}
    fi

    # Java
    if [ -f ${file}.java ]; then
        javac ${file}.java
        class=$(classname $file)
        printf " %s\t" java
        $command $options java $class
    fi

    # Node
    if [ -f ${file}.js ]; then
        printf " %s\t" js
        # nvm
        # sudo ln -s $(which node) /usr/local/bin/node
        $command $options node --max-old-space-size=8192 ${file}.js
    fi

    # Lua/LuaJIT
    if [ -f ${file}.lua ]; then
        printf " %s\t" lua
        # macOS
        # cd /opt/homebrew/bin/
        # ln -s ../Cellar/lua@5.1/5.1.5_8/bin/lua-5.1 lua
        $command $options lua ${file}.lua

        printf " %s\t" luajit
        $command $options luajit ${file}.lua
    fi

    cd ..
done
