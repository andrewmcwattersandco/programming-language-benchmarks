#!/bin/sh
set -e

tests="*/"
while getopts t: name
do
    case $name in
    t)    tests="$OPTARG";;
    ?)    printf "usage: %s: [-t tests...]\n" $0
          exit 2;;
    esac
done
shift $(($OPTIND - 1))
unset name

command=/usr/bin/time
options=

clean() {
    # C/C++
    if [ -f makefile ]
    then
      make -s clean
    else
      rm -f a.out
    fi

    # Go
    rm -f $1

    # Java
    rm -f "$(classname $1)".class
}

prebuild() {
    if [ -f prebuild ]
    then
        ./prebuild
    fi
}

backup() {
    for source_file in $@
    do
        target_file=${source_file}.orig
        if [ -f $source_file ]
        then
            mv -f $source_file $target_file
        fi
        unset target_file
    done
    unset source_file
}

restore() {
    for source_file in $@
    do
        if [ -f $source_file ]
        then
            target_file=${source_file%.orig}
            mv -f $source_file $target_file
        fi

        if [ -f $source_file ]
        then
            target_file=${source_file%~}
            mv -f $source_file $target_file
        fi

        unset target_file
    done
    unset source_file
}

capitalize() {
    read input
    printf "%s" $input | awk '{ print toupper(substr($0, 1, 1)) substr($0, 2) }'
    unset input
}

classname() {
    echo ${1}App | capitalize
}

for d in $tests
do
    file=$(basename $d)
    if [ -d $d ]
    then
        cd $d
    else
        continue
    fi
    echo $file

    clean $file
    prebuild

    # C
    if [ -f ${file}.c ]
    then
        if [ -f makefile ]
        then
            make -s
        else
            c89 ${file}.c
        fi
        printf " %s\t" c
        $command $options ./a.out
    fi

    # C++
    if [ -f ${file}.cpp ]
    then
        if [ -f makefile ]
        then
            make -s c++
        else
            c++ ${file}.cpp
        fi
        printf " %s\t" cpp
        $command $options ./a.out
    fi

    # Go
    # C/C++ source files not allowed when not using cgo or SWIG
    # Avoid setting CGO_ENABLED=0, backup and restore instead
    if [ -f ${file}.go ]
    then
        backup *.c *.cpp
        go build ./...
        restore *.c* *.cpp*
        printf " %s\t" go
        $command $options ./${file}
    fi

    # Java
    if [ -f ${file}.java ]
    then
        javac -cp '.:*' ${file}.java
        printf " %s\t" java
        class=$(classname $file)
        $command $options java -cp '.:*' $class
        unset class
    fi

    # Node
    if [ -f ${file}.js ]
    then
        printf " %s\t" js
        # nvm
        # sudo ln -s $(which node) /usr/local/bin/node
        $command $options node --max-old-space-size=8192 ${file}.js
    fi

    # Lua/LuaJIT
    if [ -f ${file}.lua ]
    then
        if [ -f makefile ]
        then
            make -s lua
        fi
        printf " %s\t" lua
        # macOS
        # cd /opt/homebrew/bin/
        # ln -s ../Cellar/lua@5.1/5.1.5_8/bin/lua-5.1 lua
        $command $options lua ${file}.lua

        printf " %s\t" luajit
        $command $options luajit ${file}.lua
    fi

    cd ..
    unset file
done
unset d
