#!/bin/sh
set -e

tests=$(ls -d */ | grep -v 'http/')
while getopts t: name
do
    case $name in
    t)    tests="$OPTARG";;
    ?)    printf "usage: %s: [-t tests...]\n" "$0"
          exit 2;;
    esac
done
shift $(($OPTIND - 1))
unset name

command=/usr/bin/time
options=-p

clean() {
    # C/C++
    if [ -f makefile ]
    then
      make -s clean
    else
      rm -f a.out
    fi

    # Go
    rm -f $1

    # Java
    rm -f "$(classname $1)".class
}

# backup - backup files as *.orig
# usage: backup source_file...
backup() {
    for source_file in "$@"
    do
        target_file=${source_file}.orig
        if [ -f "$source_file" ]
        then
            mv -f "$source_file" "$target_file"
        fi
        unset target_file
    done
    unset source_file
}

# restore - restore files from *.orig and ~
# usage: restore source_file...
restore() {
    for source_file in "$@"
    do
        if [ -f "$source_file" ]
        then
            target_file=${source_file%.orig}
            if [ "$source_file" != "$target_file" ]
            then
                mv -f "$source_file" "$target_file"
            fi
        fi

        if [ -f "$source_file" ]
        then
            target_file=${source_file%~}
            if [ "$source_file" != "$target_file" ]
            then
                mv -f "$source_file" "$target_file"
            fi
        fi

        unset target_file
    done
    unset source_file
}

capitalize() {
    read input
    printf "%s" "$input" | awk '{ print toupper(substr($0, 1, 1)) substr($0, 2) }'
    unset input
}

classname() {
    echo ${1}App | capitalize
}

for d in $tests
do
    file=$(basename "$d")
    cd "$file"
    echo "$file"
    clean "$file"

    # C
    if [ -f ${file}.c ]
    then
        restore *.c* *.cpp*
        if [ -f makefile ]
        then
            make -s
        else
            # ISO POSIX-2:1993
            c89 ${file}.c
        fi
        printf " %s\t" c
        $command $options ./a.out 2>&1 \
        | tr -s '\n' '\t'
        printf '\n'
    fi

    # C++
    if [ -f ${file}.cpp ]
    then
        if [ -f makefile ]
        then
            make -s c++
        else
            # CXX
            g++ ${file}.cpp
        fi
        printf " %s\t" cpp
        $command $options ./a.out 2>&1 \
        | tr -s '\n' '\t'
        printf '\n'
    fi

    # Go
    # C/C++ source files not allowed when not using cgo or SWIG
    # Avoid setting CGO_ENABLED=0, backup and restore instead
    if [ -f ${file}.go ] \
    && command -v go > /dev/null
    then
        backup *.c *.cpp
        go build ./...
        restore *.c* *.cpp*
        printf " %s\t" go
        $command $options ./${file} 2>&1 \
        | tr -s '\n' '\t'
        printf '\n'
    fi

    # Java
    if [ -f ${file}.java ] \
    && command -v javac > /dev/null \
    && command -v java  > /dev/null
    then
        javac -cp '.:*' ${file}.java
        printf " %s\t" java
        class=$(classname $file)
        $command $options java -cp '.:*' $class 2>&1 \
        | tr -s '\n' '\t'
        printf '\n'
        unset class
    fi

    # Node
    if [ -f ${file}.js ] \
    && command -v node > /dev/null
    then
        printf " %s\t" js
        # nvm
        # sudo ln -s $(which node) /usr/local/bin/node
        $command $options node --max-old-space-size=8192 ${file}.js 2>&1 \
        | tr -s '\n' '\t'
        printf '\n'
    fi

    # Lua/LuaJIT
    if [ -f ${file}.lua ]
    then
        if command -v lua > /dev/null
        then
            if [ -f makefile ]
            then
                make -s lua
            fi

            printf " %s\t" lua
            # macOS
            # cd /opt/homebrew/bin/
            # ln -s ../Cellar/lua@5.1/5.1.5_8/bin/lua-5.1 lua
            $command $options lua ${file}.lua 2>&1 \
            | tr -s '\n' '\t'
            printf '\n'
        fi

        if command -v luajit > /dev/null
        then
            if [ -f makefile ]
            then
                make -s clean luajit
            fi

            printf " %s\t" luajit
            $command $options luajit ${file}.lua 2>&1 \
            | tr -s '\n' '\t'
            printf '\n'
        fi
    fi

    # Python
    if [ -f ${file}.py ] \
    && command -v python3 > /dev/null
    then
        printf " %s\t" python3
        $command $options python3 ${file}.py 2>&1 \
        | tr -s '\n' '\t'
        printf '\n'
    fi

    cd ..
    unset file
done
unset d
