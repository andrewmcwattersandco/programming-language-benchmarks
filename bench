#!/bin/sh
set -e

tests="*/"
version=
while getopts t:v name
do
    case $name in
    t)    tests="$OPTARG";;
    v)    version=1;;
    ?)    printf "usage: %s: [-t tests...] [-v]\n" $0
          exit 2;;
    esac
done
shift $(($OPTIND - 1))
unset name

command=/usr/bin/time
options=-p

clean() {
    # C/C++
    if [ -f makefile ]
    then
      make -s clean
    else
      rm -f a.out
    fi

    # Go
    rm -f $1

    # Java
    rm -f "$(classname $1)".class
}

prebuild() {
    if [ -f prebuild ]
    then
        ./prebuild
    fi
}

backup() {
    for source_file in $@
    do
        target_file=${source_file}.orig
        if [ -f $source_file ]
        then
            mv -f $source_file $target_file
        fi
        unset target_file
    done
    unset source_file
}

restore() {
    for source_file in $@
    do
        if [ -f $source_file ]
        then
            target_file=${source_file%.orig}
            if [ $source_file != $target_file ]
            then
                mv -f $source_file $target_file
            fi
        fi

        if [ -f $source_file ]
        then
            target_file=${source_file%~}
            if [ $source_file != $target_file ]
            then
                mv -f $source_file $target_file
            fi
        fi

        unset target_file
    done
    unset source_file
}

capitalize() {
    read input
    printf "%s" $input | awk '{ print toupper(substr($0, 1, 1)) substr($0, 2) }'
    unset input
}

classname() {
    echo ${1}App | capitalize
}

if [ ! -z "$version" ]
then
    cc -v
    if command -v go; then go version; fi
    if command -v java; then java -version; fi
    if command -v node; then node -v; fi
    if command -v lua; then lua -v; fi
    if command -v luajit; then luajit -v; fi
fi

for d in $tests
do
    file=$(basename $d)
    if [ -d $d ]
    then
        cd $d
    else
        continue
    fi
    echo $file

    clean $file
    prebuild

    # C
    if [ -f ${file}.c ]
    then
        restore *.c* *.cpp*
        if [ -f makefile ]
        then
            make -s
        else
            c89 ${file}.c
        fi
        printf " %s\t" c
        $command $options ./a.out 2>&1 \
        | tr -s '\n' '\t'
        printf '\n'
    fi

    # C++
    if [ -f ${file}.cpp ]
    then
        if [ -f makefile ]
        then
            make -s c++
        else
            c++ ${file}.cpp
        fi
        printf " %s\t" cpp
        $command $options ./a.out 2>&1 \
        | tr -s '\n' '\t'
        printf '\n'
    fi

    # Go
    # C/C++ source files not allowed when not using cgo or SWIG
    # Avoid setting CGO_ENABLED=0, backup and restore instead
    if [ -f ${file}.go ] \
    && command -v go > /dev/null
    then
        backup *.c *.cpp
        go build ./...
        restore *.c* *.cpp*
        printf " %s\t" go
        $command $options ./${file} 2>&1 \
        | tr -s '\n' '\t'
        printf '\n'
    fi

    # Java
    if [ -f ${file}.java ] \
    && command -v javac > /dev/null \
    && command -v java  > /dev/null
    then
        javac -cp '.:*' ${file}.java
        printf " %s\t" java
        class=$(classname $file)
        $command $options java -cp '.:*' $class 2>&1 \
        | tr -s '\n' '\t'
        printf '\n'
        unset class
    fi

    # Node
    if [ -f ${file}.js ] \
    && command -v node > /dev/null
    then
        printf " %s\t" js
        # nvm
        # sudo ln -s $(which node) /usr/local/bin/node
        $command $options node --max-old-space-size=8192 ${file}.js 2>&1 \
        | tr -s '\n' '\t'
        printf '\n'
    fi

    # Lua/LuaJIT
    if [ -f ${file}.lua ]
    then
        if [ -f makefile ]
        then
            make -s lua
        fi
        if command -v lua > /dev/null
        then
            printf " %s\t" lua
            # macOS
            # cd /opt/homebrew/bin/
            # ln -s ../Cellar/lua@5.1/5.1.5_8/bin/lua-5.1 lua
            $command $options lua ${file}.lua 2>&1 \
            | tr -s '\n' '\t'
            printf '\n'
        fi

        if command -v luajit > /dev/null
        then
            printf " %s\t" luajit
            $command $options luajit ${file}.lua 2>&1 \
            | tr -s '\n' '\t'
            printf '\n'
        fi
    fi

    cd ..
    unset file
done
unset d
